#!/usr/bin/env node
var fs       = require('fs');
var path     = require('path');
var spawn    = require('child_process').spawn;
var exec     = require('child_process').exec;
var execFile = require('child_process').execFile;
var mkdirp   = require('mkdirp');
var optimist = require('optimist')
    .usage('Helps manage build scripts in a project specific (~/prosp) directory.\nFinds the nearest the parent directory containing a .git subdirectory (root),\nand uses the path from root to $HOME as a lookup in the prosp directory.\n\nExample: "p b v" - running this command would execute the b_v.sh command in the prosp directory.\n\nUsage: $0')
    .boolean('i')
    .alias('i', 'init')
    .describe('i', 'Initialize current repository inside of prosp directory.')
    .boolean('e')
    .alias('e','edit')
    .describe('e', 'Edit a script instead of executing it.')
    .boolean('l')
    .alias('l', 'list')
    .describe('l', 'List all possible executable scripts and their descriptions.')
    .alias('h', 'help')
    .describe('h', 'Display this help.');

var argv = optimist.argv;

// Check to see if user wants to display the help.
if (argv.h) {
  optimist.showHelp();
  process.exit(1);
}

// Determine subdirectory in prosp (basename of nearest dir containing .git)
var home = process.env.HOME;
var prospDir = home + '/prosp';
var curDir = path.resolve(process.cwd());
var targetDir = '';
while (curDir != '/') {
  // Check to see if the current directory contains a .git directory.
  if (fs.existsSync(curDir + '/.git'))
  {
    targetDir = curDir;
    break;
  }

  // We didn't succeed, grab parent directory.
  curDir = path.dirname(curDir);
}

// Warn the user if we didn't find a parent .git directory.
if (targetDir.length === 0) {
  //console.warn("Warning: Did not find parent directory with .git, using current directory.");
  targetDir = path.resolve(process.cwd());
}

// Once we remove HOME from the directory, we end up with a forward slash at
// the beginning of the string (prospSubDir in this case).
var prospSubDir = targetDir.replace(process.env.HOME, '');

// Grab basename. This is what we will use as prosp's directory name.
//var prospSubDir = path.basename(targetDir);
prospDir += prospSubDir;

// Initialize prosp directory.
if (argv.i) {
  console.log("Initializing prosp directory '" + prospDir + "'");
  mkdirp.sync(prospDir);

  /// TODO: Populate the directory with basic tools and utilities.

  process.exit(0);
}

// Ensure directory exists before continuing.
if (fs.existsSync(prospDir) === false) {
  console.error("Error: Failed to find directory '" + prospDir + "'");
  console.error("Try initializing prosp directory with 'pro -i'");
  process.exit(1);
}

// Check to see if the use wants to list all of the possible programs to execute.
if (argv.l) {
  console.log("Prosp directory: '" + prospDir + "'");
  // List all possible commands from the target directory.
  // Call each command to obtain their description.
  var files = fs.readdirSync(prospDir);
  for(var i in files) {
    var filePath = prospDir + "/" + files[i];
    // Exclude directories (possibly only check for executable files).
    if (fs.lstatSync(filePath).isDirectory() == false) {
      // Exclude hidden files.
      if (files[i][0] != '.') {
        var commandName = files[i].replace("_", " ");
        // Naive removal of file extension
        commandName = commandName.split(".")[0];
        // Pad command name to a certain length with spaces.
        while (commandName.length < 10) {
          commandName += ' ';
        }
        child = spawn(filePath, ['-h',commandName], { stdio: 'inherit'  });
      }
    }
  }
  process.exit(0);
}

// Construct the executable to call.
var nonHyphenated = argv._;
var exeFilename = '';
if (nonHyphenated.length > 0) {
  nonHyphenated.forEach(function (fileName) {
    if (exeFilename.length === 0) {
      exeFilename = fileName;
    }
    else {
      exeFilename += "_" + fileName;
    }
  });
}
else
{
  console.error("At least one non-hyphenated parameter required.");
  process.exit(1);
}
var commandName = exeFilename.replace("_", " ");
exeFilename += ".sh";


var fullExePath = prospDir + "/" + exeFilename;

if (fs.existsSync(fullExePath) == false)
{
  console.error("Could not find command '" + commandName + "'");
  console.error("Absolute filename: '" + fullExePath + "'");
  process.exit(1);
}

// Check to see if the user wants to edit the file.
if (argv.e) {
  child = spawn("vim", [fullExePath], { stdio: 'inherit'  });
} else {
  spawn(fullExePath, [], { stdio: 'inherit'  });
}


// Actual directory of the script (__dirname) and full path to the filename of
// the script (__filename).
//console.log(__dirname);
//console.log(__filename);
